# -*- coding: utf-8 -*-
"""Car_Price_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uGhUhr_PQUIXn7H4DFq7PMZiiE_Oy_jo
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data ollection and **Processing**"""

#loading te data from csv file to pandas dataframe
car_dataset = pd.read_csv('/car data.csv')

#inspecting the first 5 rows of the dataframe
car_dataset.head()

#checking the number of row & columns
car_dataset.shape

#getting some info about the dattaframe
car_dataset.info()

#ccheckinh the no. of missing values
car_dataset.isnull()

#How many car are petrol,desel,dealer,individual sob alada kore bar korbo
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encodeing the Catagorical data"""

#Amra akhn distinguish korbo eg:(for petrol amr 0 likhbo & for diesel amra 1 likhbo) erom jinis protekta khetre korbo
#Encoding "Fule_type" Column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

#Encoding "Seller_Type" Column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)

#Encoding "Transmission" Column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

"""spliting the data and target"""

X= car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y= car_dataset['Selling_Price']

print(X)

print(Y)

"""Spliting Training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.1, random_state=2)

"""Model Training

1. Linear Regression
"""

#Loading Linear Regression Model
lin_reg_model = LinearRegression

lin_reg_model.fit(X_train, Y_train)

"""Model Evluation"""

#Predict on Training data
training_data_prediction = lin_reg_model.predict(X_train)

#Rsquare Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

"""Visualize the actual price and Pridict price"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predictor Price")
plt.title("Actual Price Vs PredictednPrice")
plt.show()

#Predict on test data
training_data_prediction = lin_reg_model.predict(X_test)

#Rsquare Error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predictor Price")
plt.title("Actual Price Vs PredictednPrice")
plt.show()

"""Lassor regression"""

#Loading Linear Regression Model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train, Y_train)

"""Model Evluation"""

#Predict on Training data
training_data_prediction = lin_reg_model.predict(X_train)

#Rsquare Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

"""Visualize the actual price and Pridict price"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predictor Price")
plt.title("Actual Price Vs PredictednPrice")
plt.show()

#Predict on Training data
test_data_prediction = lin_reg_model.predict(X_test)

#Rsquare Error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predictor Price")
plt.title("Actual Price Vs PredictednPrice")
plt.show()

"""Lassor regression"""

#Loading Lassor Regression Model
lass_reg_model = Lasso()

lass_reg_model.fit(X_train, Y_train)

#Predict on Training data
training_data_prediction = lass_reg_model.predict(X_train)

#Rsquare Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

#visualize ytrain in lasso Regression
plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predictor Price")
plt.title("Actual Price Vs PredictednPrice")
plt.show()

#Predict on Training data
training_data_prediction = lass_reg_model.predict(X_train)

#Rsquare Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)